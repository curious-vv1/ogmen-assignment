<?xml version="1.0"?>
<robot name="bot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="common_properties.xacro" />

    <link name="base_footprint" />

    <link name="base_link">
        <visual>
            <geometry>
                <box size="0.2 0.2 0.1" />
            </geometry>
            <origin xyz="0 0 0.05" rpy="0 0 0" />
            <material name="blue" />
        </visual>
        <collision>
            <geometry>
                <box size="0.2 0.2 0.1" />
            </geometry>
            <origin xyz="0 0 0.05" rpy="0 0 0" />
        </collision>
        <xacro:box_inertia m="2.5" l="0.2" w="0.2" h="0.1"
            xyz="0 0 0.05" rpy="0 0 0" />
    </link>

    <link name="right_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="0.06" length="0.01" />
            </geometry>
            <origin xyz="0 0 0" rpy="1.57 0 0" />
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.06" length="0.01" />
            </geometry>
            <origin xyz="0 0 0" rpy="1.57 0 0" />
        </collision>
        <xacro:cylinder_inertia m="0.5" r="0.06" h="0.01" xyz="0 0 0" rpy="1.57 0 0" />
    </link>

    <link name="left_wheel_link">
        <visual>
            <geometry>
                <cylinder radius="0.06" length="0.01" />
            </geometry>
            <origin xyz="0 0 0" rpy="1.57 0 0" />
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.06" length="0.01" />
            </geometry>
            <origin xyz="0 0 0" rpy="1.57 0 0" />
        </collision>
        <xacro:cylinder_inertia m="0.5" r="0.06" h="0.01" xyz="0 0 0" rpy="1.57 0 0" />
    </link>

    <link name="caster_wheel_link">
        <visual>
            <geometry>
                <sphere radius="0.021" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <sphere radius="0.021" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <xacro:sphere_inertia m="0.25" r="0.021" xyz="0 0 0" rpy="0 0 0" />
    </link>

    <!-- Fixed joint to place base_link at correct height -->
    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 0.05" rpy="0 0 0"/>
    </joint>

    <!-- Wheel joints with precise positioning -->
    <joint name="base_right_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="right_wheel_link"/>
        <origin xyz="-0.035 -0.105 0.05" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
    </joint>

    <joint name="base_left_wheel_joint" type="continuous">
        <parent link="base_link"/>
        <child link="left_wheel_link"/>
        <origin xyz="-0.035 0.105 0.05" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
    </joint>

    <joint name="base_caster_wheel_joint" type="fixed">
        <parent link="base_link"/>
        <child link="caster_wheel_link"/>
        <origin xyz="0.071 0 0.01" rpy="0 0 0"/>
        <dynamics damping="0.0" friction="0.01"/>
    </joint>

    <!-- Lidar Link -->
    <link name="lidar_centre">
        <visual>
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="0.01" l="0.01" w="0.01" h="0.01"
            xyz="0 0 0" rpy="0 0 0" />
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_centre"/>
        <origin xyz="0 0 0.25" rpy="0 0 0"/>
    </joint>

    <!-- Camera Link -->
    <link name="camera_link">
        <visual>
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="0.01" l="0.01" w="0.01" h="0.01"
            xyz="0 0 0" rpy="0 0 0" />
    </link>

    <joint name="camera_joint" type="fixed">
        <parent link="base_link"/>
        <child link="camera_link"/>
        <origin xyz="0.1 0 0.1" rpy="0 0 0"/>
    </joint>

    <!-- Gazebo Plugins -->
    <!-- Joint State Publisher Plugin -->
    <gazebo>
        <plugin name="gazebo_ros_joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
            <ros>
                <remapping>~/out:=joint_states</remapping>
            </ros>
            <update_rate>30</update_rate>
            <joint_name>base_left_wheel_joint</joint_name>
            <joint_name>base_right_wheel_joint</joint_name>
        </plugin>
    </gazebo>

    <!-- Lidar Plugin -->
    <gazebo reference="lidar_centre">
        <material>Gazebo/Blue</material>
        <sensor name="laser" type="ray">
            <pose>0 0 0 0 0 0</pose>
            <visualize>true</visualize>
            <update_rate>30</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>540</samples>
                        <min_angle>-3.14</min_angle>
                        <max_angle>3.14</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.3</min>
                    <max>35</max>
                    <resolution>0.01</resolution>
                </range>
            </ray>
            <plugin name="laser_plugin" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <namespace>/</namespace>
                    <remapping>~/out:=scan</remapping>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>lidar_centre</frame_name>
            </plugin>
        </sensor>
    </gazebo>

    <!-- RGB Camera Plugin for ROS2 Humble -->
    <gazebo reference="camera_link">
        <sensor type="camera" name="camera">
            <update_rate>30.0</update_rate>
            <camera name="head">
                <horizontal_fov>1.3962634</horizontal_fov>
                <image>
                    <width>800</width>
                    <height>600</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.02</near>
                    <far>300</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.007</stddev>
                </noise>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <ros>
                    <namespace>/</namespace>
                    <remapping>image_raw:=camera/image_raw</remapping>
                    <remapping>camera_info:=camera/camera_info</remapping>
                </ros>
                <camera_name>camera</camera_name>
                <frame_name>camera_link</frame_name>
                <hack_baseline>0.07</hack_baseline>
            </plugin>
        </sensor>
    </gazebo>

    <!-- Differential Drive Plugin -->
    <gazebo>
        <plugin name="bot_diff_drive" filename="libgazebo_ros_diff_drive.so">
            <!-- Wheel Information -->
            <update_rate>30</update_rate>
            <left_joint>base_left_wheel_joint</left_joint>
            <right_joint>base_right_wheel_joint</right_joint>
            <wheel_separation>0.210</wheel_separation>
            <wheel_diameter>0.120</wheel_diameter>
            
            <!-- Limits -->
            <max_wheel_torque>2.0</max_wheel_torque>
            <max_wheel_acceleration>2.0</max_wheel_acceleration>
            
            <!-- Output -->
            <command_topic>cmd_vel</command_topic>
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
            <publish_wheel_tf>true</publish_wheel_tf>
        </plugin>
    </gazebo>
</robot>